swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1/rent-house
paths:
  /address/{districtID}/communes:
    get:
      tags:
      - address
      description: get all commune in district
      operationId: AddressController.GetCommune
      parameters:
      - in: path
        name: districtID
        description: districtID
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.District'
        "403":
          description: :commentID is empty
  /address/{provinceID}/districts:
    get:
      tags:
      - address
      description: get all district in province
      operationId: AddressController.GetDistrict
      parameters:
      - in: path
        name: provinceID
        description: provinceID
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.District'
        "403":
          description: :commentID is empty
  /address/provinces:
    get:
      tags:
      - address
      description: get user by uid
      operationId: AddressController.Get
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Province'
        "403":
          description: :commentID is empty
  /admin/active-comment/:
    post:
      tags:
      - admin
      description: create users
      operationId: AdminController.ActivateComment
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      - in: query
        name: commentID
        description: houseID
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /admin/active-house/:
    post:
      tags:
      - admin
      description: create users
      operationId: AdminController.ActivateHouse
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      - in: query
        name: houseID
        description: houseID
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /admin/active-owner/:
    post:
      tags:
      - admin
      description: create users
      operationId: AdminController.ActivateOwner
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      - in: query
        name: ownerID
        description: ownerID
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /admin/owners/:
    get:
      tags:
      - admin
      description: get all owners
      operationId: AdminController.GetAllOwner
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Owner'
  /admin/page-wait-comments/:
    get:
      tags:
      - admin
      description: get page comment
      operationId: AdminController.GetPageWaitComment
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      - in: query
        name: page
        description: the page
        required: true
        type: integer
        format: int64
      - in: query
        name: count
        description: the count
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Comment'
  /admin/page-wait-houses/:
    get:
      tags:
      - admin
      description: get page comment
      operationId: AdminController.GetPageWaitHouse
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      - in: query
        name: page
        description: the page
        required: true
        type: integer
        format: int64
      - in: query
        name: count
        description: the count
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /admin/page-wait-owners/:
    get:
      tags:
      - admin
      description: get page comment
      operationId: AdminController.GetPageWaitOwner
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      - in: query
        name: page
        description: the page
        required: true
        type: integer
        format: int64
      - in: query
        name: count
        description: the count
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Owner'
  /admin/renters/:
    get:
      tags:
      - admin
      description: get all renters
      operationId: AdminController.GetAllRenter
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Renter'
  /admin/wait-comments/:
    get:
      tags:
      - admin
      description: get all wait comments
      operationId: AdminController.GetAllWaitComment
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /admin/wait-houses/:
    get:
      tags:
      - admin
      description: get all renters
      operationId: AdminController.GetAllWaitHouse
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /admin/wait-owners/:
    get:
      tags:
      - admin
      description: get all wait owners
      operationId: AdminController.GetAllWaitOwner
      parameters:
      - in: header
        name: key
        description: admin key
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Owner'
  /chat/:
    get:
      tags:
      - chat
      description: WebSocket
      operationId: WebsocketController.WebSocket
  /comment/{commentID}/:
    get:
      tags:
      - comment
      description: get user by uid
      operationId: CommentController.Get
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: commentID
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Comment'
        "403":
          description: :commentID is empty
    put:
      tags:
      - comment
      description: update the user
      operationId: CommentController.Update
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: commentID
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.CommentPut'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :commentID is not int
    delete:
      tags:
      - comment
      description: delete the user
      operationId: CommentController.Delete
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: commentID
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: commentID is empty
  /house/:
    get:
      tags:
      - house
      description: get all renters
      operationId: HouseController.GetAllSearchHouse
      parameters:
      - in: query
        name: key
        description: key
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /house/{houseID}/:
    get:
      tags:
      - house
      description: get user by uid
      operationId: HouseController.Get
      parameters:
      - in: path
        name: houseID
        description: The house id
        required: true
        type: string
      - in: query
        name: province
        description: the provinceID
        type: string
      - in: query
        name: district
        description: the districtID
        type: string
      - in: query
        name: commune
        description: the commune id
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
        "403":
          description: :houseID is empty
    put:
      tags:
      - house
      description: update the user
      operationId: HouseController.Update
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: houseID
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.HousePut'
      responses:
        "200":
          description: '{string} success'
        "403":
          description: :houseID is not int
    delete:
      tags:
      - house
      description: delete the user
      operationId: HouseController.Delete
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: houseID
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: houseID is empty
  /house/{houseID}/comments/:
    get:
      tags:
      - house
      description: get all renters
      operationId: HouseController.GetAllComment
      parameters:
      - in: path
        name: houseID
        description: the house-id
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/response.Comment'
  /house/{houseID}/images:
    put:
      tags:
      - house
      description: create users
      operationId: HouseController.AddImage
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: houseID
        description: The house image
        required: true
        type: string
      - in: formData
        name: files
        description: house image
        required: true
        type: array
        items:
          type: file
      responses:
        "200":
          description: '{[]string} image link'
        "403":
          description: body is empty
    post:
      tags:
      - house
      description: create users
      operationId: HouseController.UploadImage
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: houseID
        description: The house image
        required: true
        type: string
      - in: formData
        name: files
        description: house image
        required: true
        type: array
        items:
          type: file
      responses:
        "200":
          description: '{[]string} image link'
        "403":
          description: body is empty
  /house/{houseID}/page-comments/:
    get:
      tags:
      - house
      description: get page comment
      operationId: HouseController.GetPageComment
      parameters:
      - in: path
        name: houseID
        description: the houseID
        required: true
        type: string
      - in: query
        name: page
        description: the page
        required: true
        type: integer
        format: int64
      - in: query
        name: count
        description: the count
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/response.Comment'
  /house/page:
    get:
      tags:
      - house
      description: get page houses
      operationId: HouseController.GetPageActivateHouse
      parameters:
      - in: query
        name: page
        description: page
        required: true
        type: integer
        format: int64
      - in: query
        name: count
        description: count
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /house/search-results:
    get:
      tags:
      - house
      description: get page houses
      operationId: HouseController.GetPageActivateSearchHouse
      parameters:
      - in: query
        name: key
        description: key for search
        required: true
        type: string
      - in: query
        name: page
        description: page
        required: true
        type: integer
        format: int64
      - in: query
        name: count
        description: count
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /owner/:
    get:
      tags:
      - owner
      description: get user by uid
      operationId: OwnerController.Get
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :ownerID is empty
    put:
      tags:
      - owner
      description: update the user
      operationId: OwnerController.Update
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.OwnerPut'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :ownerID is not int
    delete:
      tags:
      - owner
      description: delete the user
      operationId: OwnerController.Delete
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /owner/house/:
    post:
      tags:
      - owner
      description: create users
      operationId: OwnerController.CreateHouse
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.HousePost'
      responses:
        "200":
          description: '{int} models.House'
        "403":
          description: body is empty
  /owner/houses/:
    get:
      tags:
      - owner
      description: get all renters
      operationId: OwnerController.GetAllHouse
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /owner/login/:
    post:
      tags:
      - owner
      description: login
      operationId: OwnerController.Login
      parameters:
      - in: body
        name: login
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      responses:
        "200":
          description: '{string} token'
        "403":
          description: body is empty
  /owner/page-houses/:
    get:
      tags:
      - owner
      description: get page house
      operationId: OwnerController.GetPageHouse
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: query
        name: page
        description: the page
        required: true
        type: integer
        format: int64
      - in: query
        name: count
        description: the count
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.House'
  /owner/sign-up/:
    post:
      tags:
      - owner
      description: create users
      operationId: OwnerController.CreateOwner
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.OwnerPost'
      responses:
        "200":
          description: '{int} models.UserID'
        "403":
          description: body is empty
  /renter/:
    get:
      tags:
      - renter
      description: get user by uid
      operationId: RenterController.Get
      parameters:
      - in: header
        name: token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Renter'
        "403":
          description: :renterID is empty
    put:
      tags:
      - renter
      description: update the user
      operationId: RenterController.Update
      parameters:
      - in: header
        name: token
        description: The token
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.RenterPut'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :renterID is not int
    delete:
      tags:
      - renter
      description: delete the user
      operationId: RenterController.Delete
      parameters:
      - in: header
        name: token
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: renterID is empty
  /renter/comment/{houseID}:
    post:
      tags:
      - renter
      description: create comment
      operationId: RenterController.AddComment
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.CommentPost'
      - in: path
        name: houseID
        description: the house id
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /renter/like/{houseID}:
    put:
      tags:
      - renter
      description: create comment
      operationId: RenterController.AddHouseToFavorite
      parameters:
      - in: header
        name: token
        description: The token string
        required: true
        type: string
      - in: path
        name: houseID
        description: the house id
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /renter/login/:
    post:
      tags:
      - renter
      description: Login
      operationId: RenterController.Login
      parameters:
      - in: body
        name: login
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /renter/sign-up/:
    post:
      tags:
      - renter
      description: create users
      operationId: RenterController.CreateRenter
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/request.RenterPost'
      responses:
        "200":
          description: '{int} models.UserID'
        "403":
          description: body is empty
definitions:
  models.Address:
    title: Address
    type: object
    properties:
      commune:
        type: string
      district:
        type: string
      province:
        type: string
  models.Comment:
    title: Comment
    type: object
    properties:
      activate:
        type: boolean
      content:
        type: string
      header:
        type: string
      house_id:
        type: string
      owner_id:
        type: string
      post_time:
        type: integer
        format: int64
      star:
        type: integer
        format: int64
  models.District:
    title: District
    type: object
    properties:
      code:
        type: string
      name:
        type: string
      name_with_type:
        type: string
      parent_code:
        type: string
      path:
        type: string
      path_with_type:
        type: string
      slug:
        type: string
      type:
        type: string
  models.House:
    title: House
    type: object
    properties:
      activate:
        type: boolean
      address:
        $ref: '#/definitions/models.Address'
      content:
        type: string
      expired_time:
        type: integer
        format: int64
      header:
        type: string
      house_type:
        $ref: '#/definitions/models.HouseType'
      image_link:
        type: array
        items:
          type: string
      infrastructure:
        $ref: '#/definitions/models.Infrastructure'
      like:
        type: integer
        format: int64
      near_by:
        type: array
        items:
          type: string
      owner_id:
        type: string
      post_time:
        type: integer
        format: int64
      price:
        type: integer
        format: int64
      rented:
        type: boolean
      unit:
        $ref: '#/definitions/models.Unit'
      view:
        type: integer
        format: int64
      with_owner:
        type: boolean
  models.HouseType:
    title: HouseType
    format: int64
    type: integer
  models.Infrastructure:
    title: Infrastructure
    type: object
    properties:
      air_condition:
        type: boolean
      balcony:
        type: boolean
      electric_price:
        type: integer
        format: int64
      heater:
        type: boolean
      other:
        type: string
      private_bathroom:
        type: boolean
      water_price:
        type: integer
        format: int64
  models.Login:
    title: Login
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  models.Owner:
    title: Owner
    type: object
    properties:
      activate:
        type: boolean
      address:
        $ref: '#/definitions/models.Address'
      owner_full_name:
        type: string
      owner_name:
        type: string
      password:
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
  models.Profile:
    title: Profile
    type: object
    properties:
      email:
        type: string
      id_card:
        type: string
      phone_number:
        type: string
  models.Province:
    title: Province
    type: object
    properties:
      code:
        type: string
      name:
        type: string
      name_with_type:
        type: string
      slug:
        type: string
      type:
        type: string
  models.Renter:
    title: Renter
    type: object
    properties:
      email:
        type: string
      list_favourite:
        type: array
        items:
          type: string
      password:
        type: string
      phone_number:
        type: string
      renter_full_name:
        type: string
      renter_name:
        type: string
  models.Unit:
    title: Unit
    format: int64
    type: integer
  models.User:
    title: User
    type: object
  request.CommentPost:
    title: CommentPost
    type: object
    properties:
      content:
        type: string
      header:
        type: string
  request.CommentPut:
    title: CommentPut
    type: object
    properties:
      content:
        type: string
      header:
        type: string
  request.HousePost:
    title: HousePost
    type: object
    properties:
      commune_code:
        type: string
      content:
        type: string
      header:
        type: string
      house_type:
        $ref: '#/definitions/models.HouseType'
      infrastructure:
        $ref: '#/definitions/models.Infrastructure'
      near_by:
        type: array
        items:
          type: string
      price:
        type: integer
        format: int64
      unit:
        $ref: '#/definitions/models.Unit'
      with_owner:
        type: boolean
  request.HousePut:
    title: HousePut
    type: object
    properties:
      commune_code:
        type: string
      content:
        type: string
      header:
        type: string
      house_type:
        $ref: '#/definitions/models.HouseType'
      infrastructure:
        $ref: '#/definitions/models.Infrastructure'
      near_by:
        type: array
        items:
          type: string
      price:
        type: integer
        format: int64
      unit:
        $ref: '#/definitions/models.Unit'
      with_owner:
        type: boolean
  request.OwnerPost:
    title: OwnerPost
    type: object
    properties:
      commune_code:
        type: string
      owner_full_name:
        type: string
      owner_name:
        type: string
      password:
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
  request.OwnerPut:
    title: OwnerPut
    type: object
    properties:
      commune_code:
        type: string
      owner_full_name:
        type: string
      password:
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
  request.RenterPost:
    title: RenterPost
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      phone_number:
        type: string
      renter_full_name:
        type: string
      renter_name:
        type: string
  request.RenterPut:
    title: RenterPut
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      phone_number:
        type: string
      renter_full_name:
        type: string
  response.Comment:
    title: Comment
    type: object
    properties:
      activate:
        type: boolean
      comment_id:
        type: string
      content:
        type: string
      header:
        type: string
      post_time:
        type: integer
        format: int64
tags:
- name: owner
  description: |
    Operations about Owner
- name: house
  description: |
    Operations about house
- name: renter
  description: |
    Operations about Renter
